// Global imports
const chai = require('chai');
const spies = require('chai-spies');

// Local imports
const SecretGenerationStrategy = require('./secret-generation-strategy');
const TokensSignerConfiguration = require('./tokens-signer-configuration');
const TokensSigner = require('./tokens-signer');

// Mocks
class TokensSignerConfigurationMock extends TokensSignerConfiguration {
  constructor() {
    super(458, 'issuer', 'subject', 'audience');
  }
}

class SecretGenerationStrategyMock extends SecretGenerationStrategy {
  constructor(secretToReturn) {
    super();
    this.secretToReturn = secretToReturn;
  }

  generateSecret() {
    return this.secretToReturn;
  }
}

// Test suite setup
chai.use(spies);
const sandbox = chai.spy.sandbox();
const { expect } = chai;

describe.only(`TokensSigner ${__dirname}`, () => {
  const secretBase = 'this-is-secret-base';
  const salt = 'this-is-secret-salt';
  const saltedSecret = `${secretBase}---${salt}`;

  let tokensSignerConfiguration;
  let secretGenerationStrategy;

  /** @type {TokensSigner} */
  let unitUnderTest;

  beforeEach(() => {
    tokensSignerConfiguration = new TokensSignerConfigurationMock();
    secretGenerationStrategy = new SecretGenerationStrategyMock(saltedSecret);
    unitUnderTest = new TokensSigner(
      tokensSignerConfiguration,
      secretBase,
      secretGenerationStrategy,
    );
  });

  describe('constructor(tokensSignerConfiguration, secretBase, secretGenerationStrategy)', () => {
    it('does not expose tokensSignerConfiguration');
    it('does not expose secretBase');
    it('does not expose secretGenerationStrategy');

    describe('throws an error when...', () => {
      it('tokensSignerConfiguration is not defined');
      it('tokensSignerConfiguration is not an instance of TokensSignerConfiguration');
      it('secretBase is not a string');
      it('secretBase is shorter than 8 characters');
      it('secretGenerationStrategy is not defined');
      it('secretGenerationStrategy is not an instance of SecretGenerationStrategy');
    });
  });

  describe('TokensSigner#sign(payload, salt)', () => {
    it('returns a token');
    it('generates tokens with valid payload');
    it('uses secret generated by secretGenerationStrategy to sign the token');
  });
});
